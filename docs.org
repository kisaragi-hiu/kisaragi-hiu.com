#+title: Documentation for writing stuff on this blog

* List of tags

#+begin_src web
<!-- Use func-page-term(., tags) instead of .GetTerms(tags) or .Site.Taxonomies.tags.
         Because those do not list tags that are only declared in taxonomy term pages.

         "Tagging tags" isn't a well-supported thing in Hugo (yet?).
    -->
<!-- prettier-ignore -->
{{ $alltags := (slice) }}
{{ range .Site.AllPages }}
    {{ $alltags = (union $alltags
                         (partial "func-page-term"
                                  (dict "page" . "taxonomy" "tags")))}}
{{ end }}

<!-- Sort them -->
{{ $alltags = (sort $alltags "Title") }}

<!-- Actually display them -->
{{ with $alltags }}
<h1>Tags</h1>
{{ partial "tags-block" . }}
<!-- prettier-ignore -->
{{ end }}
#+end_src


* Converting dated pages to pages without dates

1. move =content/blog/xxxx-xx-xx-<id>.org= to =content/<id>.org=
2. add a line =/blog/xxxx-xx-xx-<id> /<id>= to ~_redirects~

* Making new versions of pages

First use the =k/hugo-snapshot-page= command. This will create a snapshot for the current version.

#+caption: A version of the snapshot function. I might include this in this repository instead of in my emacs config.
#+begin_src emacs-lisp
(defun k/hugo-snapshot-page ()
  "Add the current version of a page to the old version archive."
  (interactive)
  (let* ((default-directory (projectile-project-root))
         (id (f-base (buffer-file-name)))
         (keywords (org-collect-keywords '("created" "updated")))
         (version
          ;; updated > created
          (or (cadr (assoc "UPDATED" keywords))
              (cadr (assoc "CREATED" keywords))))
         (filename (replace-regexp-in-string "[:-]" "" version))
         (dir (f-join "content" "archive" id))
         (orig-content (buffer-string)))
    (make-directory dir t)
    (with-temp-file (f-join dir (concat filename ".org"))
      (insert orig-content)
      (goto-char (point-min))
      (forward-line)
      (insert "#+archive: " id "\n"))))
#+end_src

Then edit the current version as you please.

When you’re done, updated the =#+updated:= field.

* Extracting date

Usually getting the creation date of a page is done with ={{.Date}}=.

This however gets a date even when the page doesn’t specify it.

If you only want to get the date when it’s explicitly set, use ={{.Params.created}}= instead.

* Adding tags to taxonomy terms

For instance, I want to tag [[notes:public/content/tags/prsk/_index.org][the page for prsk]] with “games”. But Hugo doesn’t seem to support adding taxonomy terms onto taxonomy terms, at least not out of the box.

To work around this:

- My taxonomy term lists now also look through all term pages, and list those with a matching term:

  #+begin_src web
  {{ partial "content" . }}
  {{ $tagged := (slice) }}
  {{ range (where .Site.AllPages "Kind" "term" ) }}
    {{ if (in (.Page.Param $.Data.Plural) (anchorize $.LinkTitle)) }}
      {{ $tagged = (union $tagged (slice .Page))}}
    {{ end }}
  {{ end }}
  {{ with $tagged }}
  <h2>Terms</h2>
  <ul class="index">
  {{ range $tagged }}
      <li>{{ partial "index-item" . }}</li>
  {{ end }}
  </ul>
  {{ end }}
  #+end_src

  (This was painful to figure out)

- Term pages have to be created manually. For instance, because no regular page is tagged #games, I have to create =content/tags/games/_index.org= myself.

- You can no longer rely on =.Site.Taxonomies.tags= to list all tags. Instead, you have to do something like this:

  #+begin_src web
  <!-- Extract all values specified in the tags parameter -->
  {{ $alltagnames := (slice) }}
  {{ range .Site.AllPages }}
  {{ $alltagnames = (union $alltagnames .Params.tags) }}
  {{ end }}

  <!-- Sort them -->
  {{ $alltagnames = (sort $alltagnames) }}

  <!-- Convert them to tag pages -->
  {{ $alltags := (slice) }}
  {{ range $alltagnames }}
  <!-- Remember to anchorize the tag name -->
  {{ $alltags = (union $alltags (slice ((site).GetPage (printf "/tags/%s" (anchorize .))))) }}
  {{ end }}

  <!-- Now you have an equivalent of .Site.Taxonomies.tags -->
  {{ with $alltags }}
  <h1>Tags</h1>
  {{ partial "tags" . }}
  {{ end }}
  #+end_src


* CSS
** .flex
- Make an element a flex list
- Also enable flex-wrap
* Shortcodes
** link shortcut shortcodes
- github path [description]
- gitlab path [description]
- niconico path [description]
- pixiv path [desciption]

Example: ={{< github "kisaragi-hiu" >}}= → a link to https://github.com/kisaragi-hiu

Vice versa for other sites.
** HTML wrappers
- kbd keys
- ruby text furigana

These exist because it’s painful to write inline HTML in Org.

Example:
- ={{< kbd "Tab" >}}= → ~<kbd>Tab</kbd>~
- ={{< ruby "漢字" "ㄏㄢˋㄗˋ" >}}= → ~<ruby>漢字<rt>ㄏㄢˋㄗˋ</rt></ruby>~

** side-by-side
side-by-side . content

Display elements in =content= in a flex div.

If you only give it two elements (such as two src blocks), they will be displayed side-by-side. This is the primary use.

** video
- video url

Display a GIF-like autoplay video.

Use Org’s =#+caption= to add a figcaption.

** melpa-badge
- melpa-badge package

Display a melpa badge as an image link.

* Function partials
** func-language-code-to-name

#+begin_src lisp
(partial "func-language-code-to-name" "en") ; -> "English"
#+end_src

** func-page-term

Replacement for =.GetTerms= with support for “tagging tags”.

=.GetTerms "tags"= doesn’t return anything in a list page, even if tags are set for the page. This function partial implements that.

Arguments:

- page :: the page to extract terms from. Usually =.=, just like =.GetTerms=.
- taxonomy :: the taxonomy (eg. “tags”) to extract terms from.

#+begin_src lisp
(.GetTerms "tags")
(partial "func-page-term" (dict "page" . "taxonomy" "tags"))
#+end_src

** func-translate
See [[file:data/readme.org][Hugo Data folder]].

#+begin_src go-text-template
{{ partial "func-translate" (dict "id" "Table of Contents" "page" .)}}
#+end_src
** func-page-type
Return a page type suitable for use as =og:type=.
* Partials
Partials are like shortcodes, but for use in other templates.

** all-terms (:taxonomy :title :pages :partial)

#+begin_src go-text-template
{{ partial
   "all-terms"
   (dict "taxonomy" "tags"
         "title" "Tags"
         "pages" .Site.AllPages
         "partial" "tag") }}
#+end_src

The example displays a list of tags that are present in =.Site.AllPages=. Each tag is passed to the =tag= partial.

** heading (:title :ctx :enableTypePath)

#+begin_src go-text-template
{{ partial "heading" (dict "title" "Hello" "enableTypePath" true "ctx" .)}}
#+end_src

- title :: The text that goes into the heading
- enableTypePath :: Show an eg. =Covers /= text for a covers page
- ctx :: Needed for the type path, pass the parent page into this argument

** melpa-badge

like the melpa-badge shortcode, but as a partial.

Example: ={{ partial "melpa-badge" "magit" }}=

Used in the =project= shortcode definition.

** index-item

Generic index item with some metadata.

* Page properties

- =toc=: If not empty, a table of content will be displayed on the page.
- =sort=: in a list page, how to sort its entries. Can be =asc= (old to new) or =desc= (new to old); default is =desc=.
- =hugo_nolist=: only applies to list pages. Only display the page’s own content and not its children, effectively turning the list into a single page. This is first used in [[file:content/projects/_index.org]].
- =coverimage=: Path to the image used in social media cards. Will be passed through absURL.
- =description=: A one to two sentence description. (per the recommendation from [[https://ogp.me/][Open Graph Protocol]].)
- =pagetype=: Override for the =og:type= of the page. The =og:type= is usually inferred by =func-page-type=.

* Pages vs. Blog posts

A blog post has a date and is kind of like a public diary.

An individual page should be a standalone document (ie. [[https://www.orgroam.com/manual/A-Brief-Introduction-to-the-Zettelkasten-Method.html][a concept note]]); it should be also be a document that will [[https://www.gwern.net/Wikipedia-and-Other-Wikis][obviously not fit on Wikipedia]].

* Setting a different title for a list page

For example, I want the =prsk= tag to display as “Project Sekai” in its list page, but remain “prsk” in a tag list.

If I simply set its title to “Project Sekai”, that will also be used in a tag list.

Instead, set the name to be used in tag lists as its =linktitle=, and the desired display name in =title=. Ordinarily =linktitle= takes precedance over =title=, but as [[file:templates/_default/list.html][my list page template references the =title= property directly]], that property is used in the displayed page.
* Grouping posts by date in a template

Example:

#+begin_src web
{{ range (where .Site.RegularPages "Section" "blog").GroupByDate "2006" }}
<div class="index-year">
    <h1>{{ .Key }}</h1>
    {{ range .Pages }}
    {{ .Scratch.Set "noyear" true }}
    {{ partial "index-item" . }}
    {{ end }}
</div>
{{ end }}
#+end_src

- Get a list, call its =GroupByDate= method with a Go-style timestamp specifier
- Use =range= to iterate through the result
- The result contains
  - =Key=, the matched thing that makes the group, which is the year in the example
  - and =Pages=, the pages that share the same key
- You can further iterate on the inner =.Pages=
